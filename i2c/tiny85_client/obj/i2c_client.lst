
obj/i2c_client.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000240  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000266  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016d  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000187  00000000  00000000  0000065b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014a  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000064  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	b2 d0       	rcall	.+356    	; 0x190 <main>
  2c:	c2 c0       	rjmp	.+388    	; 0x1b2 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <delay_ms>:
.list

.global delay_ms
.func delay_ms
delay_ms:
	sbiw	r24, 1
  30:	01 97       	sbiw	r24, 0x01	; 1
	brcs	9f
  32:	28 f0       	brcs	.+10     	; 0x3e <__SP_H__>
	ldi		ZL, lo8(F_CPU / 4000)
  34:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi		ZH, hi8(F_CPU / 4000)
  36:	f7 e0       	ldi	r31, 0x07	; 7
1:
	sbiw	ZL, 1
  38:	31 97       	sbiw	r30, 0x01	; 1
	brne	1b
  3a:	f1 f7       	brne	.-4      	; 0x38 <delay_ms+0x8>
	rjmp	delay_ms
  3c:	f9 cf       	rjmp	.-14     	; 0x30 <delay_ms>
9:	ret
  3e:	08 95       	ret

00000040 <delay_06us>:
.endfunc

.global delay_06us
.func delay_06us
delay_06us:
	ret				; rcall + ret = 7clock
  40:	08 95       	ret

00000042 <delay_13us>:
	...
delay_13us:
	nop				; rcall + ret = 7clock + nop * 5
	nop
	nop
	nop
	nop
  4a:	00 00       	nop
	ret
  4c:	08 95       	ret

0000004e <usi_twi_slave>:
void usi_twi_slave(void)
{
	uint8_t recd;

	/* Wait Start Condition */
		DDRB &= ~(1<<USI_SDA);
  4e:	b8 98       	cbi	0x17, 0	; 23
		USICR = 0b00101000;
  50:	88 e2       	ldi	r24, 0x28	; 40
  52:	8d b9       	out	0x0d, r24	; 13
		USISR = 0xF0;
  54:	80 ef       	ldi	r24, 0xF0	; 240
  56:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USISIF))) ;
  58:	77 9b       	sbis	0x0e, 7	; 14
  5a:	fe cf       	rjmp	.-4      	; 0x58 <usi_twi_slave+0xa>

	/* Wait Address */
		DDRB &= ~(1<<USI_SDA);
  5c:	b8 98       	cbi	0x17, 0	; 23
		while ((PINB & (1<<USI_SCL)) & !(USISR & (1<<USIPF))) ;
  5e:	86 b3       	in	r24, 0x16	; 22
  60:	8e b1       	in	r24, 0x0e	; 14

		USICR = 0b00111000;
  62:	88 e3       	ldi	r24, 0x38	; 56
  64:	8d b9       	out	0x0d, r24	; 13
		USISR = 0xF0;
  66:	80 ef       	ldi	r24, 0xF0	; 240
  68:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  6a:	76 9b       	sbis	0x0e, 6	; 14
  6c:	fe cf       	rjmp	.-4      	; 0x6a <usi_twi_slave+0x1c>
		if ( (USIDR>>1) != TWI_SLAVE_ADDRESS) {
  6e:	8f b1       	in	r24, 0x0f	; 15
  70:	86 95       	lsr	r24
  72:	80 32       	cpi	r24, 0x20	; 32
  74:	e9 f5       	brne	.+122    	; 0xf0 <usi_twi_slave+0xa2>
			return;
		}
		if ( (USIDR & 0x01) == 1) {
  76:	78 99       	sbic	0x0f, 0	; 15
  78:	3b c0       	rjmp	.+118    	; 0xf0 <usi_twi_slave+0xa2>
			return;
		}

	/* Send Ack */
		USIDR = 0;
  7a:	1f b8       	out	0x0f, r1	; 15
		DDRB |= (1<<USI_SDA);
  7c:	b8 9a       	sbi	0x17, 0	; 23
		USISR = 0b01111110;
  7e:	8e e7       	ldi	r24, 0x7E	; 126
  80:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  82:	76 9b       	sbis	0x0e, 6	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <usi_twi_slave+0x34>

	/* Receive Data */
		DDRB &= ~(1<<USI_SDA);
  86:	b8 98       	cbi	0x17, 0	; 23
		USISR = 0b01110000;
  88:	80 e7       	ldi	r24, 0x70	; 112
  8a:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  8c:	76 9b       	sbis	0x0e, 6	; 14
  8e:	fe cf       	rjmp	.-4      	; 0x8c <usi_twi_slave+0x3e>

		recd = USIDR;
  90:	9f b1       	in	r25, 0x0f	; 15

	/* Send Ack */
		USIDR = 0;
  92:	1f b8       	out	0x0f, r1	; 15
		DDRB |= (1<<USI_SDA);
  94:	b8 9a       	sbi	0x17, 0	; 23
		USISR = 0b01111110;
  96:	8e e7       	ldi	r24, 0x7E	; 126
  98:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  9a:	76 9b       	sbis	0x0e, 6	; 14
  9c:	fe cf       	rjmp	.-4      	; 0x9a <usi_twi_slave+0x4c>

	/* Wait Repeated Start */
		DDRB &= ~(1<<USI_SDA);
  9e:	b8 98       	cbi	0x17, 0	; 23
		USICR = 0b00101000;
  a0:	88 e2       	ldi	r24, 0x28	; 40
  a2:	8d b9       	out	0x0d, r24	; 13
		USISR = 0xF0;
  a4:	80 ef       	ldi	r24, 0xF0	; 240
  a6:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USISIF))) ;
  a8:	77 9b       	sbis	0x0e, 7	; 14
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usi_twi_slave+0x5a>

	/* Wait Address */
		DDRB &= ~(1<<USI_SDA);
  ac:	b8 98       	cbi	0x17, 0	; 23
		while ((PINB & (1<<USI_SCL)) & !(USISR & (1<<USIPF))) ;
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	8e b1       	in	r24, 0x0e	; 14
		USICR = 0b00111000;
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	8d b9       	out	0x0d, r24	; 13
		USISR = 0xF0;
  b6:	80 ef       	ldi	r24, 0xF0	; 240
  b8:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  ba:	76 9b       	sbis	0x0e, 6	; 14
  bc:	fe cf       	rjmp	.-4      	; 0xba <usi_twi_slave+0x6c>
		if ( (USIDR>>1) != TWI_SLAVE_ADDRESS) {
  be:	8f b1       	in	r24, 0x0f	; 15
  c0:	86 95       	lsr	r24
  c2:	80 32       	cpi	r24, 0x20	; 32
  c4:	a9 f4       	brne	.+42     	; 0xf0 <usi_twi_slave+0xa2>
			return;
		}
		if ( (USIDR & 0x01) == 0) {
  c6:	78 9b       	sbis	0x0f, 0	; 15
  c8:	13 c0       	rjmp	.+38     	; 0xf0 <usi_twi_slave+0xa2>
			return;
		}

	/* Send Ack */
		USIDR = 0;
  ca:	1f b8       	out	0x0f, r1	; 15
		DDRB |= (1<<USI_SDA);
  cc:	b8 9a       	sbi	0x17, 0	; 23
		USISR = 0b01111110;
  ce:	8e e7       	ldi	r24, 0x7E	; 126
  d0:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  d2:	76 9b       	sbis	0x0e, 6	; 14
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <usi_twi_slave+0x84>

	/* Send Data */
		USIDR = recd + 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	89 0f       	add	r24, r25
  da:	8f b9       	out	0x0f, r24	; 15
		DDRB |= (1<<USI_SDA);
  dc:	b8 9a       	sbi	0x17, 0	; 23
		USISR = 0b01110000;
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  e2:	76 9b       	sbis	0x0e, 6	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <usi_twi_slave+0x94>

	/* Wait Ack (or Nack) */
		DDRB &= ~(1<<USI_SDA);
  e6:	b8 98       	cbi	0x17, 0	; 23
		USISR = 0b01111110;
  e8:	8e e7       	ldi	r24, 0x7E	; 126
  ea:	8e b9       	out	0x0e, r24	; 14
		while (!(USISR & _BV(USIOIF))) ;
  ec:	76 9b       	sbis	0x0e, 6	; 14
  ee:	fe cf       	rjmp	.-4      	; 0xec <usi_twi_slave+0x9e>
  f0:	08 95       	ret

000000f2 <usi_twi_master_transfer>:
	}
	return 1;
}

uint8_t usi_twi_master_transfer(void)
{
  f2:	cf 93       	push	r28
	uint8_t cr = 0b00101011;
	uint8_t data;

	do {
		delay_13us();
		USICR = cr;		/* SCL = H */
  f4:	cb e2       	ldi	r28, 0x2B	; 43
{
	uint8_t cr = 0b00101011;
	uint8_t data;

	do {
		delay_13us();
  f6:	a5 df       	rcall	.-182    	; 0x42 <delay_13us>
		USICR = cr;		/* SCL = H */
  f8:	cd b9       	out	0x0d, r28	; 13
		do {} while ( !(PINB & (1<<USI_SCL)));		/* Wait SCL H */
  fa:	b2 9b       	sbis	0x16, 2	; 22
  fc:	fe cf       	rjmp	.-4      	; 0xfa <usi_twi_master_transfer+0x8>
		delay_06us();
  fe:	a0 df       	rcall	.-192    	; 0x40 <delay_06us>
		USICR = cr;		/* SCL = L */
 100:	cd b9       	out	0x0d, r28	; 13
	} while ( !(USISR & (1<<USIOIF)) );
 102:	76 9b       	sbis	0x0e, 6	; 14
 104:	f8 cf       	rjmp	.-16     	; 0xf6 <usi_twi_master_transfer+0x4>

	delay_13us();
 106:	9d df       	rcall	.-198    	; 0x42 <delay_13us>

	data = USIDR;
 108:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	9f b9       	out	0x0f, r25	; 15
	DDRB |= _BV(USI_SDA);
 10e:	b8 9a       	sbi	0x17, 0	; 23

	return data;
}
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <usi_twi_master_stop>:

uint8_t usi_twi_master_stop(void)
{
	PORTB &= ~(_BV(USI_SDA));
 114:	c0 98       	cbi	0x18, 0	; 24
	PORTB |= _BV(USI_SCL);
 116:	c2 9a       	sbi	0x18, 2	; 24
	do {} while (!(PINB & (_BV(USI_SCL))));
 118:	b2 9b       	sbis	0x16, 2	; 22
 11a:	fe cf       	rjmp	.-4      	; 0x118 <usi_twi_master_stop+0x4>
	delay_06us();
 11c:	91 df       	rcall	.-222    	; 0x40 <delay_06us>
	PORTB |= _BV(USI_SDA);
 11e:	c0 9a       	sbi	0x18, 0	; 24
	delay_13us();
 120:	90 df       	rcall	.-224    	; 0x42 <delay_13us>

	return USISR & (1<<USIPF);
 122:	8e b1       	in	r24, 0x0e	; 14
}
 124:	80 72       	andi	r24, 0x20	; 32
 126:	08 95       	ret

00000128 <usi_twi_master>:

void usi_twi_master(void)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
	PORTB |= _BV(USI_SDA) | _BV(USI_SCL);
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	85 60       	ori	r24, 0x05	; 5
 130:	88 bb       	out	0x18, r24	; 24
	DDRB  |= _BV(USI_SDA) | _BV(USI_SCL);
 132:	87 b3       	in	r24, 0x17	; 23
 134:	85 60       	ori	r24, 0x05	; 5
 136:	87 bb       	out	0x17, r24	; 23

	USIDR = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	8f b9       	out	0x0f, r24	; 15

	USICR = 0b00101010;
 13c:	8a e2       	ldi	r24, 0x2A	; 42
 13e:	8d b9       	out	0x0d, r24	; 13
	USISR = 0xF0;
 140:	80 ef       	ldi	r24, 0xF0	; 240
 142:	8e b9       	out	0x0e, r24	; 14
}

static
uint8_t usi_twi_check_condition(void)
{
	if ( USISR & (_BV(USISIF) | _BV(USIPF) | _BV(USIDC)) ) {
 144:	8e b1       	in	r24, 0x0e	; 14
 146:	80 7b       	andi	r24, 0xB0	; 176
 148:	01 f5       	brne	.+64     	; 0x18a <usi_twi_master+0x62>

	if (!usi_twi_check_condition()) {
		return;
	}

	PORTB |= _BV(USI_SCL);		/* SCL = H */
 14a:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PINB & (1<<USI_SCL))) ;
 14c:	b2 9b       	sbis	0x16, 2	; 22
 14e:	fe cf       	rjmp	.-4      	; 0x14c <usi_twi_master+0x24>
	delay_06us();
 150:	77 df       	rcall	.-274    	; 0x40 <delay_06us>

	/* Make Start Condition */
	PORTB &= ~(_BV(USI_SDA));	/* SDA = L */
 152:	c0 98       	cbi	0x18, 0	; 24
	delay_06us();
 154:	75 df       	rcall	.-278    	; 0x40 <delay_06us>
	PORTB &= ~(_BV(USI_SCL));	/* SCL = L */
 156:	c2 98       	cbi	0x18, 2	; 24
	PORTB |= _BV(USI_SDA);	/* Release SDA */
 158:	c0 9a       	sbi	0x18, 0	; 24

	/* Check Start Condition */
	if (!(USISR & (1<<USISIF))) {
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	16 c0       	rjmp	.+44     	; 0x18a <usi_twi_master+0x62>
		return;
	}

	/* Write Address */
	PORTB &= ~(_BV(USI_SCL));	/* SCL = L */
 15e:	c2 98       	cbi	0x18, 2	; 24
	USIDR = (TWI_SERVER_ADDRESS << 1);
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	8f b9       	out	0x0f, r24	; 15

	USISR = 0xF0;				/* Transfer 8bit */
 164:	d0 ef       	ldi	r29, 0xF0	; 240
 166:	de b9       	out	0x0e, r29	; 14
	usi_twi_master_transfer();
 168:	c4 df       	rcall	.-120    	; 0xf2 <usi_twi_master_transfer>

	/* Read ack bit */
	DDRB &= ~(_BV(USI_SDA));
 16a:	b8 98       	cbi	0x17, 0	; 23
	USISR = 0xFE;				/* Transfer 1bit */
 16c:	ce ef       	ldi	r28, 0xFE	; 254
 16e:	ce b9       	out	0x0e, r28	; 14
	if (usi_twi_master_transfer() & 0x01) {
 170:	c0 df       	rcall	.-128    	; 0xf2 <usi_twi_master_transfer>
 172:	80 fd       	sbrc	r24, 0
 174:	0a c0       	rjmp	.+20     	; 0x18a <usi_twi_master+0x62>
		return;
	}
	/* Got ACK */

	/* Write Data */
	PORTB &= ~(_BV(USI_SCL));	/* SCL = L */
 176:	c2 98       	cbi	0x18, 2	; 24
	USIDR = 'x';
 178:	88 e7       	ldi	r24, 0x78	; 120
 17a:	8f b9       	out	0x0f, r24	; 15

	USISR = 0xF0;				/* Transfer 8bit */
 17c:	de b9       	out	0x0e, r29	; 14
	usi_twi_master_transfer();
 17e:	b9 df       	rcall	.-142    	; 0xf2 <usi_twi_master_transfer>

	/* Read ack bit */
	DDRB &= ~(_BV(USI_SDA));
 180:	b8 98       	cbi	0x17, 0	; 23
	USISR = 0xFE;				/* Transfer 1bit */
 182:	ce b9       	out	0x0e, r28	; 14
	if (usi_twi_master_transfer() & 0x01) {
 184:	b6 df       	rcall	.-148    	; 0xf2 <usi_twi_master_transfer>
 186:	80 ff       	sbrs	r24, 0
		/* Got NACK */
		return;
	}
	/* Got ACK */

	usi_twi_master_stop();
 188:	c5 df       	rcall	.-118    	; 0x114 <usi_twi_master_stop>
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <main>:

int main()
{
	MCUSR = 0;
 190:	14 be       	out	0x34, r1	; 52
	  PB1 : AIN1
	  PB2 : SCL
	  PB3 : Output
	  PB4 : Output
	*/
	PORTB = 0b00000101;
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b00011100;
 196:	8c e1       	ldi	r24, 0x1C	; 28
 198:	87 bb       	out	0x17, r24	; 23

	/* PB1(AIN1) Digital Input Disable */
	DIDR0 = 0b00000010;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	84 bb       	out	0x14, r24	; 20

	/* Analog Comparator Disable */
	ACSR  = 0b10000000;
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	88 b9       	out	0x08, r24	; 8

	/* Powerdown : Timer1, Timer0, AD Converter */
	PRR   = _BV(PRTIM1) | _BV(PRTIM0) | _BV(PRADC);
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	80 bd       	out	0x20, r24	; 32

	do {
		usi_twi_slave();
 1a6:	53 df       	rcall	.-346    	; 0x4e <usi_twi_slave>

		delay_ms(100);
 1a8:	84 e6       	ldi	r24, 0x64	; 100
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	41 df       	rcall	.-382    	; 0x30 <delay_ms>

		usi_twi_master();
 1ae:	bc df       	rcall	.-136    	; 0x128 <usi_twi_master>
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0x20>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
